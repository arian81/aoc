inp = """43217654309879876104563234589896761012345656543098901001
34108903212368123233472105676787851299856567832187812652
45677814301457014312986345589876940387765678943046543743
56789325100876525800345276430105432456566589858956769821
65438456912963436901236187621234501223455410767349874430
74321067803451107898547093412012982016764323101210143561
89412210987430210789698892102123673107895214589723652678
78601521856521345678721743089034543212345605679854781789
66789430545678934505430654898745672212236765434765690878
55676545038943213216765989601654981300129870121012345969
46543216127657804389834808762347690456789983498141456452
65454307233456934870126712354878765565210012507230987321
54567898332110125961015645403969234674323215616546576010
65658983021001876854324106912452128789321308723455678901
76543212137892965348933217832141089873410419678964987652
89862901236543501267018363101033210565566566569873788543
89871876544345652106529854892123521454479877654012699830
78100703454278743212434763763014672343287778943210581021
65210212565189858906763212654985785650198961212101432010
54321056876012567875898708783476698763267890303215678321
87012567988703489874345679692676543294986725456574329478
96543498589876530365210189501987650187675216987687610569
01234567651010921234501076401236501010564307678596789876
10389830532329854376542345321545692323403018789455430965
21456721013456765289031234980098783410912129670320121054
92505432565421010109120345671107654567823451061210120123
87615443478302341018750134543234541050765962552121234984
34322342189219650129665234789432132021894873443010965673
45451056077828743234574343276543032134703210523457876532
51069987456943104545987650167898749865612309610765454101
32678678345652210698092156756547056764303458779890363232
43010589232781306787183045876532178965210569888211274321
56923432101090458989254234923421369878934678898302989430
87889211078764567876360143010030450767125986567401276589
96676305669653478985478652102141341458076803456564345676
45435434734522780340349760123456232349883712678178737894
80127821821011091211299854354987101016792103549069016323
92346940910329654304587121267807652345013401232108925412
81055432101458765643671010871018947654324589543987432101
76567789023467010782532346965425638945695678654986540012
05498654110567821891047897212334721032786014345678901098
12387013223489932346156598101549889821012823216765212387
03456323016576542345692367210678710701296954907854323456
12345465437895431016781450123467623654387867878985401501
21089870124326528701670101874345634565676541045621032012
32189210065017019632543210965236730120545632456734548743
43498349876298903545450143050159821321234012349895699654
34567658389101232123469052101567634489234510106786789985
99876501276788943016578769872498105672105621215021058876
87035432365897654107689898763343234321678789334134567655
70129641034781089898791099854232145690569245493254321567
63238701123654178718982387763156056781410126787655010498
54345652321073265001073456012047189872328901098546710327
34568543434589874132569895145438976987437812361239891210
21879654898678013203456701236327805456546521450967890123
30968745467654320112345210987610112345545430567856543234"""


# inp = """89010123
# 78121874
# 87430965
# 96549874
# 45678903
# 32019012
# 01329801
# 10456732"""

from copy import deepcopy

from collections import deque

inp = [list(x) for x in inp.split("\n")]


def get_path(path, node):
    res = [node]
    while node in path:
        res.append(path[node])
        node = path[node]
    return res


def pprint(grid, path):

    copy = deepcopy(grid)

    for r, c in path:
        copy[r][c] = "*"

    for i in copy:
        print("".join(i))


def valid(path, node, grid):
    res = [grid[node[0]][node[1]]]
    while node in path:
        res.append(grid[path[node][0]][path[node][1]])
        node = path[node]
    print(res)


def bfs(start):

    q = deque()
    q.append(start)
    visited = set()
    path = {}

    dirs = [(1, 0), (-1, 0), (0, 1), (0, -1)]

    count = 0

    while q:

        r, c = q.popleft()

        for dr, dc in dirs:
            nr, nc = r + dr, c + dc

            if (
                not (0 <= nr < len(inp))
                or not (0 <= nc < len(inp[0]))
                or (nr, nc) in visited
                or inp[nr][nc] == "0"
            ):
                continue

            if int(inp[nr][nc]) == int(inp[r][c]) + 1:
                path[(nr, nc)] = (r, c)
                visited.add((nr, nc))
                if inp[nr][nc] == "9":
                    count += 1
                    # res_path = get_path(path, (nr, nc))
                    # pprint(inp, res_path)
                    # print("\n\n\n")
                    # valid(path, (nr, nc), inp)
                else:
                    q.append((nr, nc))

    return count


starts = []
ends = []

for i in range(len(inp)):
    for j in range(len(inp[i])):
        if inp[i][j] == "0":
            starts.append((i, j))
        if inp[i][j] == "9":
            ends.append((i, j))

part1 = 0
for i in starts:
    part1 += bfs(i)


def bfs(start, end):
    q = deque()
    q.append(start)
    visited = set()
    path_counts = {}
    path_counts[start] = 1

    dirs = [(1, 0), (-1, 0), (0, 1), (0, -1)]

    while q:
        r, c = q.popleft()

        if (r, c) == end:
            return path_counts[end]

        for dr, dc in dirs:
            nr, nc = r + dr, c + dc

            if (
                not (0 <= nr < len(inp))
                or not (0 <= nc < len(inp[0]))
                or inp[nr][nc] == "0"
                # or inp[nr][nc] == "."
            ):
                continue

            if int(inp[nr][nc]) == int(inp[r][c]) + 1:
                if (nr, nc) not in visited:
                    q.append((nr, nc))
                    visited.add((nr, nc))

                # Update path count
                path_counts[(nr, nc)] = (
                    path_counts.get((nr, nc), 0) + path_counts[(r, c)]
                )

    return 0


part2 = 0

for i in starts:
    rating = 0
    for j in ends:
        rating += bfs(i, j)
    part2 += rating

print(part2)
