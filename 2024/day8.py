inp = """.....8............1r.....a....................O...
.a..............4..q.........................0...9
....a.........8...................................
.................D.....................V0.........
.....d............................................
.r..........q....................................O
..................q...........................9...
..............D..............X..................V.
........D................X.................0......
.........8............X...........................
....................J....................9..0.....
..a..B............r..W........J...............R..Q
......WD...q.....1..........Q..............R..V...
.1W...................u...........................
..............................u.............R.....
....B..............d..c..................R........
.............J..............X............V........
......1...........................3...............
......B...........d...................3...........
............8..J.......u.....3....................
...........4.............6........................
.....4v.............d.......................O.....
..........................v.2.....................
.............................................s....
..................4...M..W..................s.....
......................m...........................
...........M......................................
..b..................c............................
....................Co..........KQ.......O.s......
.................C............................s...
.......x............c............................3
........o......A....U.....Q.........5.............
...............U..................j...5...........
.....K.......U................j..........2........
.......A.v.....w.....................c...5........
..K....................................j..........
...............K.yk....B.............2............
......C....b..............x...........Y...........
.....mA..C......U.................................
........M.....A.....................2..6...5......
.............................7.......Y............
.m.M......w..v....................................
............m...........x.....Y...................
....................k....w........................
......b.....w..S....7.............................
..............S..............x...........Y........
....................S...6.........................
.y...............S..........7.6.................9.
o..........k...............b......................
yo...........k...................................."""
# inp = """............
# ........0...
# .....0......
# .......0....
# ....0.......
# ......A.....
# ............
# ............
# ........A...
# .........A..
# ............
# ............"""
# inp = """T.........
# ...T......
# .T........
# ..........
# ..........
# ..........
# ..........
# ..........
# ..........
# .........."""


from collections import defaultdict

inp = [list(x) for x in inp.split("\n")]

antenas = defaultdict(list)

for i in range(len(inp)):
    for j in range(len(inp[i])):
        if inp[i][j].isalnum():
            antenas[inp[i][j]].append((i, j))


def get_antinodes(point1, point2):
    r1, c1 = point1
    r2, c2 = point2

    r_diff = r2 - r1
    c_diff = c2 - c1

    antinode1 = (r1 - r_diff, c1 - c_diff)
    antinode2 = (r2 + r_diff, c2 + c_diff)

    return (antinode1, antinode2)


def valid(node, row_len, col_len):
    r, c = node
    if 0 <= r < row_len and 0 <= c < col_len:
        return True


row_len = len(inp)
col_len = len(inp[0])

part1 = set()

for antena in antenas:
    for i in range(len(antenas[antena])):
        for j in range(i + 1, len(antenas[antena])):
            node1, node2 = get_antinodes(antenas[antena][i], antenas[antena][j])
            if valid(node1, row_len, col_len):
                part1.add(node1)
            if valid(node2, row_len, col_len):
                part1.add(node2)


def get_antinodes(point1, point2):
    nodes = []

    r1, c1 = point1
    r2, c2 = point2

    r_diff = r2 - r1
    c_diff = c2 - c1

    antinode1 = (r1, c1)
    antinode2 = (r2, c2)
    while valid(antinode1, row_len, col_len) or valid(antinode2, row_len, col_len):
        antinode1 = (antinode1[0] - r_diff, antinode1[1] - c_diff)
        antinode2 = (antinode2[0] + r_diff, antinode2[1] + c_diff)

        if valid(antinode1, row_len, col_len):
            nodes.append(antinode1)
        if valid(antinode2, row_len, col_len):
            nodes.append(antinode2)

    return nodes


part2 = set()
for antena in antenas:
    for i in range(len(antenas[antena])):
        for j in range(i + 1, len(antenas[antena])):
            for node in get_antinodes(antenas[antena][i], antenas[antena][j]):
                part2.add(node)

for i in antenas:
    for j in antenas[i]:
        part2.add(j)


print(len(part2))
